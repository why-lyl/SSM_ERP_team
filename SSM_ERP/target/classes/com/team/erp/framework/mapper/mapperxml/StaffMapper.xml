<?xml version="1.0" encoding="UTF-8"?>
<!--表明是实现mapper接口层的xml文件  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.team.erp.framework.mapper.StaffMapper">

	<resultMap type="com.team.erp.framework.model.Staff" id="BaseResultMap">
		<id column="staff_id" jdbcType="INTEGER" property="staffId"/>
	    <result column="staff_name" jdbcType="VARCHAR" property="staffName"/>
	    <result column="staff_sex" jdbcType="VARCHAR" property="staffSex"/>
	    <result column="staff_age" jdbcType="INTEGER" property="staffAge"/>
	    <result column="staff_birthday" jdbcType="DATE" property="staffBirthday"/>
	    <result column="staff_tel" jdbcType="VARCHAR" property="staffTel"/>
	    <result column="staff_email" jdbcType="VARCHAR" property="staffEmail"/>
	    <result column="staff_join" jdbcType="DATE" property="staffJoin"/>
	    <result column="staff_depart" jdbcType="VARCHAR" property="staffDepart"/>
	    <result column="account_id" jdbcType="VARCHAR" property="accountId"/>
	</resultMap>
	
    <sql id="Base_Column_List">
      	staff_id, staff_name, staff_sex, staff_age, staff_birthday, staff_tel, 
      	staff_email,staff_join,staff_depart,account_id
    </sql>
    <!-- 根据id查询staff -->
	<select id="selectStaffByStaffId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from t_staff
		where staff_id = #{staffId,jdbcType=INTEGER}
	</select>
	
	<!-- 根据姓名查询Staff -->
	<select id="selectStaffBystaffName" parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from t_staff
		where staff_name= #{staffName,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据用户姓名查询Staff -->
	<select id="selectStaffByAccountId" parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from t_staff
		where account_id= #{userName,jdbcType=VARCHAR}
	</select>
	
	<!-- 查出staff的所有有关信息 -->
	<select id="selectStaffAll" resultMap="BaseResultMap">
		select 
		*
		from t_staff
	</select>
	<!-- 添加员工1 -->
    <insert id="addStaff" parameterType="com.team.erp.framework.model.Staff" useGeneratedKeys="true" keyProperty="staffId">
  	     INSERT INTO t_staff values (#{staffId},#{staffName},#{staffSex},#{staffAge},
  	    #{staffBirthday},#{staffTel},#{staffEmail},#{staffJoin},#{staffDepart},#{accountId})
    </insert>
    <!-- 添加员工2 -->
    <insert id="addStaffAll" parameterType="com.team.erp.framework.model.Staff" useGeneratedKeys="true" keyProperty="staffId">
  	    INSERT INTO t_staff values (null,#{staffName},#{staffSex},#{staffAge},
  	    #{staffBirthday},#{staffTel},#{staffEmail},#{staffJoin},#{staffDepart},#{accountId})
    </insert>
    <!-- 添加员工3 -->
    <insert id="addStaffAccountIdByUserId" parameterType="java.lang.Integer" useGeneratedKeys="true" keyProperty="staffId">
  	    INSERT INTO t_staff(account_id) SELECT user_name FROM t_user
        where user_id = #{userId}
    </insert>
     <!-- 删除用户1 -->
    <delete id="deleteStaffByStaffId" parameterType="java.lang.Integer">
	    delete from t_staff
	    where staff_id = #{staffId,jdbcType=INTEGER}
    </delete>
    <!-- 删除用户2 -->
    <delete id="deleteStaffByStaffName" parameterType="java.lang.String">
	    delete from t_staff
	    where staff_id = #{staffId,jdbcType=VARCHAR}
    </delete>
    <!-- 删除用户3 -->
    <delete id="deleteStaffByAccountId" parameterType="java.lang.String">
	    delete from t_staff
	    where account_id = #{accountId,jdbcType=VARCHAR}
    </delete>
    <!--更新职员1 -->
    <update id="updateByPrimaryKeySelective" parameterType="com.team.erp.framework.model.Staff">
	    update t_staff
	    <set>
	      <if test="staffName != null">
	        staff_name = #{staffName,jdbcType=VARCHAR},
	      </if>
	      <if test="staffPassword != null">
	        staff_password = #{staffPassword,jdbcType=VARCHAR},
	      </if>
	    </set>
	    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <!--更新职员2-->
  <update id="updateByPrimaryKey" parameterType="com.team.erp.framework.model.Staff">
	    update t_staff
	    set staff_name = #{staffName,jdbcType=VARCHAR},
	        staff_password = #{staffPassword,jdbcType=VARCHAR}
	    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <!--更新职员3 暂定 #{departmentName,jdbcType=VARCHAR}-->
  <update id="updateStaffDpartmentByDepartmentId" parameterType="java.lang.Integer">
	    update t_staff
	    set staff_depart = "待分配"
	    where staff_id = #{staffId,jdbcType=INTEGER}
  </update>
  <!--更新职员4-->
  <update id="updateStaffAccountIdBynewAccountId" parameterType="java.lang.String">
	    update t_staff
	    set account_id = #{newAccountId,jdbcType=VARCHAR}
	    where account_id = #{accountId,jdbcType=VARCHAR}
  </update>
</mapper>